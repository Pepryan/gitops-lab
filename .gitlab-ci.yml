workflow:
  rules:
  # jika bukan di branch main, jangan run pipeline
  - if: $CI_COMMIT_BRANCH != "main"
    when: never
  - exists:
    - vm.yaml

# gunakan string commit untuk nama folder(environment) yang unik

variables:
  env: /home/gitlab-runner/
  scripts_path: /home/gitlab-runner/environment/scripts
  vm_path: /home/gitlab-runner/environment/vm
  vm: /home/gitlab-runner/environment/vm.yaml
  prom: /etc/prometheus/prometheus.yml
#  env_name: $GITLAB_USER_LOGIN

stages:
  - generate
  - init
  - validate
  - plan
#  - notif
  - apply
  # - config-monitoring
  - install-node-exporter
  - nat
  - destroy

job-generate:
  stage: generate
  only:
    changes:
      - vm.yaml
  script:
    - echo "copy branch contents"
    - cp -r * $env
    - echo "copy python-tfgen scripts and provider locally"
    - cp -r $scripts_path/python-tfgen/ $env
    - echo "generate updated vm.yaml"
    - cd $env
    - ./python-tfgen/tfgen.py -f vm.yaml -o vm
  tags: [kvm]

job-init:
  stage: init
  when: manual
  only:
    changes:
      - vm.yaml
  script:
    - cd $vm_path
    - echo "init $(pwd)"
    - terraform init
  tags: [kvm]

job-validate:
  stage: validate
  only:
    changes:
      - vm.yaml
  script:
    - cd $vm_path
    - echo "validate $(pwd)"
    - terraform validate
  tags: [kvm]

job-plan:
  stage: plan
  only:
    changes:
      - vm.yaml
  script:
    - cd $vm_path
    - echo "planning $(pwd)"
    - terraform plan
    - terraform plan -out tfgen
  tags: [kvm]

job-apply:
 stage: apply
 allow_failure: true
 only:
   changes:
     - vm.yaml
 script:
   - cd $vm_path
   - echo "apply $(pwd)"
   - terraform apply -auto-approve
 tags: [kvm]

job-config-monitoring:
  stage: install-node-exporter
  allow_failure: true
  only:
    changes:
      - vm.yaml
  when: delayed
  start_in: 1 minute
  script:
    - cd $scripts_path
    - ./run_install_node_exporter.py -f $vm -k dwara.pem
  tags: [kvm]

job-config-prom:
  stage: prom
  allow_failure: true
  only:
    changes:
      - vm.yaml
  when: delayed
  start_in: 20 seconds
  script:
    - cd $scripts_path
    - ./apply_prom.py -f $vm -fp $prom
  tags: [kvm]

job-nat:
  stage: nat
  only:
    changes:
      - nat.yaml
  script:
    - cp nat.yaml $scripts_path/nat.yaml
    - cd $scripts_path
    - ./apply_nat.py nat.yaml
  tags: [nat]

job-destroy:
  stage: destroy
  only:
    changes:
      - vm.yaml
  script:
    - cd $vm_path
    - echo "destroying all vm.yaml"
    - terraform destroy -auto-approve
    - cd $env
    - echo "destroy success"
  when: manual
  tags: [kvm]


