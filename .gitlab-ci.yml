workflow:
  rules:
  # jika bukan di branch main, jangan run pipeline
  - if: $CI_COMMIT_BRANCH != "python"
    when: never
  - exists:
    - vm.yaml

# gunakan string commit untuk nama folder(environment) yang unik

#variables:
#  env_name: $GITLAB_USER_LOGIN

stages:
  - generate
  - init
  - validate
  - plan
#  - notif
  - apply
#  - config-monitoring
  - nat
  - destroy

job-generate:
  stage: generate
  only:
    changes:
      - vm.yaml
  script:
    - cp -r * /home/gitlab-runner/environment
    - cd /home/gitlab-runner/environment
#    - ./python-tfgen/tfgen.py -f vm.yaml -o vm
    - echo "generate new temp files"
    - echo $CI_JOB_ID
    - ./python-tfgen/tfgen.py -f vm.yaml -o $CI_JOB_ID
    - cp -r $CI_JOB_ID/!(terraform.*) vm
    - echo "Remove temp generated files"
    - rm -rf /home/gitlab-runner/environment/$CI_JOB_ID
  tags: [kvm]

job-init:
  stage: init
  when: manual
  only:
    changes:
      - vm.yaml
  script:
    - cd /home/gitlab-runner/environment/vm
    - echo "init $(pwd)"
    - terraform init
  tags: [kvm]

job-validate:
  stage: validate
  only:
    changes:
      - vm.yaml
  script:
    - cd /home/gitlab-runner/environment/vm
    - echo "validate $(pwd)"
    - terraform validate
  tags: [kvm]

job-plan:
  stage: plan
  only:
    changes:
      - vm.yaml
  script:
    - cd /home/gitlab-runner/environment/vm
    - echo "planning $(pwd)"
    - terraform plan
  tags: [kvm]

#job-notif:
#  stage: notif
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  # only:
  #   changes:
  #     - merge_requests
#  script:
#    - cd /home/gitlab-runner/environment
#    - ./notif.sh $GITLAB_USER_LOGIN
#  tags: [kvm]

job-apply:
  stage: apply
  allow_failure: true
  only:
    changes:
      - vm.yaml
  script:
    - cd /home/gitlab-runner/environment/vm
    - echo "apply $(pwd)"
    # - terraform apply -auto-approve 2>> error-$env_name.log
    - terraform apply -auto-approve
  tags: [kvm]

#job-config-monitoring:
#  stage: config-monitoring
  # allow_failure: true
#  only:
#    changes:
#      - vm.yaml
#  when: delayed
#  start_in: 1 minute
#  script:
#    - cd /home/gitlab-runner/environment/scripts
#    - ./run_install_node_exporter.py -f /home/gitlab-runner/environment/env-$env_name.txt -k dwara.pem
#  tags: [kvm]

job-nat:
  stage: nat
  only:
    changes:
      - config-nat.yaml
  script:
    - cp config-nat.yaml /home/gitlab-runner/environment/scripts/config-nat.yaml
    # - cp apply_nat.py /home/gitlab-runner/environment/scripts/apply_nat.py
    # - cp validate_nat.py /home/gitlab-runner/environment/config-nat/validate_nat.py
    - cd /home/gitlab-runner/environment/scripts
    # - ./validate_nat.py list-nat-used.txt config-nat.yaml
    - ./apply_nat.py config-nat.yaml
    # - echo "LIST USED PORT in LAB7"
    # - cat list-nat-used.txt
  tags: [nat]

job-destroy:
  stage: destroy
  only:
    changes:
      - vm.yaml
  script:
    - cd /home/gitlab-runner/environment/vm
    - echo "destroy $(pwd)"
    - terraform destroy -auto-approve
    - cd /home/gitlab-runner/environment
    # - ./delete-rules-iptables.sh env-$env_name.txt
    - echo "destroy success"
    # - cd /home/gitlab-runner/environment
    # - ./notif-destroy.sh
  when: manual
  tags: [kvm]


