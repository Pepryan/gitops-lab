workflow:
  rules:
  # jika bukan di branch main, jangan run pipeline
  #- if: $CI_COMMIT_BRANCH != "main"
  #  when: never
  - exists:
    - vm.txt

# gunakan string commit untuk nama folder(environment) yang unik
variables:
  env_name: $GITLAB_USER_LOGIN

stages:
  - generate
  - init
  - validate
  - plan
  - apply
  - nat
  - destroy

job-generate:
  stage: generate
  only:
    changes:
      - vm.txt
  script:
    - echo "copying vm.txt to home/gitlab-runner/environment"
    - cp vm.txt /home/gitlab-runner/environment/env-$env_name.txt
    - cd /home/gitlab-runner/environment
    - echo "generate env folder and files"
    - ./not-tfgen2.sh $env_name env-$env_name.txt
  tags: [kvm]

job-init:
  stage: init
  only:
    changes:
      - vm.txt
  script:
    - cd /home/gitlab-runner/environment/$env_name
    - echo "init $(pwd)"
    - terraform init
  tags: [kvm]

job-validate:
  stage: validate
  only:
    changes:
      - vm.txt
  script:
    - cd /home/gitlab-runner/environment/$env_name
    - echo "validate $(pwd)"
    - terraform validate
  tags: [kvm]

job-plan:
  stage: plan
  only:
    changes:
      - vm.txt
  script:
    - cd /home/gitlab-runner/environment/$env_name
    - echo "planning $(pwd)"
    - terraform plan
  tags: [kvm]

job-apply:
  stage: apply
  allow_failure: true
  only:
    changes:
      - vm.txt
  script:
    - cd /home/gitlab-runner/environment/$env_name
    - echo "apply $(pwd)"
    # - terraform apply -auto-approve 2>> error-$env_name.log
    - terraform apply -auto-approve
  tags: [kvm]

job-nat:
  stage: nat
  only:
    changes:
      - config-nat.yaml
  script:
    - cp config-nat.yaml /home/gitlab-runner/environment/config-nat.yaml
    - cp apply_nat.py /home/gitlab-runner/environment/apply_nat.py
    - cp validate_nat.py /home/gitlab-runner/environment/validate_nat.py
    - cd /home/gitlab-runner/environment
    - ./validate_nat.py list-nat-used.txt config-nat.yaml
    - ./apply_nat.py config-nat.yaml
    - echo "LIST USED PORT in LAB7"
    - cat list-nat-used.txt
  tags: [nat]

job-destroy:
  stage: destroy
  script:
    - cd /home/gitlab-runner/environment
    - ./delete-rules-iptables.sh env-$env_name.txt
    - cd /home/gitlab-runner/environment/$env_name
    - echo "destroy $(pwd)"
    - terraform destroy -auto-approve
    - echo "remove $env_name env folder and files"
    - rm -rf ../$env_name ../env-$env_name.txt
    - cd /home/gitlab-runner/environment
    - ./delete-rules-iptables.sh env-$env_name.txt
    - echo "destroy success"
  when: manual
  tags: [kvm]


